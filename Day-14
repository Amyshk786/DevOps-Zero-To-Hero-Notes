Day 14 - Configuration Management With Ansible |Puppet vs Ansible
==================================================================

Configuration Management is a Way how the DevOps Engineers Manage the Configuration of the Servers Or Configuration of the Infrastructure.


Configuration Management will Aim to Solve the Problem Of Managing the Configuration of Multiple Servers.



If you are a Sys-Admin and you have your Servers in your Own Datacenter on On-Prem and you have  [50 Windows Seevers]  [25 Ubuntu Servers]  [25 CentOS Servers] Now if you want to Upgrade These Servers,   If you want to Install Some Package or Dependencies,  Or If you want to Do Security Patches Update on all the machines as All the Machines Have 3 Different OS It will be Very Difficult for Us to do this. 


We will have to SSH Into these machines and  do the Changes and As the OS  are different we will have to use different Commands. For Linux we Can Use Shell Script but for Ubuntu and CentOS the Command syntax will be different and For Windows we have to do PowerShell Scripting 


After Moving to cloud and after moving to the micro service architecture What happened was the number of servers that were getting created has multiplied by 10x and the size of the server has shrinked down by 10x  that means previously let's say if you were creating 1 physical server or 1 local server with a 10 GB Ram because of the micro service architecture what has happened is the number of servers that you are creating has increased and the configuration or the compute or the resources inside the server has decreased. 


So that's why with the advancement of clouds the number of servers that the devops engineers or system administrators were creating has increased leaps and bonds


1) Upgrades

2) Security Patches

3) Installation



# Ansible

Ansible is Written in Python  & [Ansible uses SSH Protocol to connect with Linux and Win-RM to connect with Windows]

YAML is Used to Write Ansible Play-Books

We can Write Our Own Ansible Modules

Ansible Uses Push Mechanism

It Uses Agentless Model

Inventory File me Sare EC2 Instance k IP Add dal dene ka toh wo configuration sare instances per ho jayegi

Password-less Authentication

Ansible Support is Very Good with Windows and Linux

Ansible Galaxy Can be Used for Sharing Modules






Ansible Disadvantages - 

Not Suitable for Advance Ansible Modules

Debugging

Performance







# Puppet

Puppet Uses Puppet Language

Puppet Uses Pull Mechanism

Puppet Uses Master Slave Model



-----------------------------------------------------------------




# Introduction to Ansible

## What is Ansible ?

Ansible is an open source IT automation engine that automates 
- provisioning 
- configuration management
- application deployment
- orchestration

and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.




-----------------------------------------------------------------


## How Ansible works ?

Ansible is agentless in nature, which means you don't need install any software on the manage nodes.

For automating Linux and Windows, Ansible connects to managed nodes and pushes out small programs—called Ansible modules—to them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished. These modules are designed to be idempotent when possible, so that they only make changes to a system when necessary.

For automating network devices and other IT appliances where modules cannot be executed, Ansible runs on the control node. Since Ansible is agentless, it can still communicate with devices without requiring an application or service to be installed on the managed node.




-----------------------------------------------------------------



# Inventory 

Ansible inventory file is a fundamental component of Ansible that defines the hosts (remote systems) that you want to manage and the groups those hosts belong to. The inventory file can be static (a simple text file) or dynamic (generated by a script). It provides Ansible with the information about the remote nodes to communicate with during its operations.




-----------------------------------------------------------------


## Static Inventory

A static inventory file is typically a plain text file (usually named hosts or inventory) and is structured in INI or YAML format. Here are examples of both formats:

### INI Format

```
# inventory file: hosts

[webservers]
web1.example.com
web2.example.com

[dbservers]
db1.example.com
db2.example.com

[all:vars]
ansible_user=admin
ansible_ssh_private_key_file=/path/to/key
```




-----------------------------------------------------------------


### YAML

```
# inventory file: hosts.yaml

all:
  vars:
    ansible_user: admin
    ansible_ssh_private_key_file: /path/to/key
  children:
    webservers:
      hosts:
        web1.example.com:
        web2.example.com:
    dbservers:
      hosts:
        db1.example.com:
        db2.example.com:
```




-----------------------------------------------------------------


## Dynamic Inventory

A dynamic inventory is generated by a script or plugin and can be used for environments where hosts are constantly changing (e.g., cloud environments). The script or plugin fetches the list of hosts from a source like AWS, GCP, or any other dynamic source.

Here is an example of a dynamic inventory script for AWS EC2:

```
#!/usr/bin/env python

import json
import boto3

def get_aws_ec2_inventory():
    ec2 = boto3.client('ec2')
    instances = ec2.describe_instances()
    inventory = {
        'all': {
            'hosts': [],
            'vars': {
                'ansible_user': 'ec2-user',
                'ansible_ssh_private_key_file': '/path/to/key'
            }
        },
        '_meta': {
            'hostvars': {}
        }
    }

    for reservation in instances['Reservations']:
        for instance in reservation['Instances']:
            if instance['State']['Name'] == 'running':
                public_ip = instance['PublicIpAddress']
                inventory['all']['hosts'].append(public_ip)
                inventory['_meta']['hostvars'][public_ip] = {
                    'ansible_host': public_ip
                }

    print(json.dumps(inventory, indent=2))

if __name__ == '__main__':
    get_aws_ec2_inventory()
```

## Usage


ansible-playbook -i inventory <Adhoc command or Playbook.yml>
