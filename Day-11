Day 9 & Day 11 - Git and GitHub
=================================


What is Version Controlling or Version Control System - The primary Concept of VCS is 2 Things,  It Addresses 2 Major Problems.

1) Sharing Of Code 

2) Versioning





What is Fork -  Fork is Used to Create Entire Copy of Original Source Code Repository 

What is Clone  -  Git Clone is a Process Using Which You Pull The Code from GitHub, GitLab or Bitbucket And download Specific Repository





Git is a distributed version control system commonly used for tracking changes in source code during software development. Below are some of the essential Git commands and their detailed usage:






----------------------------------------------------------------------------





Git vs GitHub
================




# Git is a Distributed Version Control System & It is OpenSource




# GitHub and Other Orgainsations Like  GitLab and Bitbucket have built better Solutions in terms of Usability, in terms of Raising Issues, Commenting, Talking to Peers, Reviewing the Code and Now a Days GitHub, GitLab and Bitbucket Also Supports Project Management. Fundamentally GitHub, GitLab and Bitbucket are using the same concept of improvising the existing Git. And all of the Orgainsations have built a wrapper or they have built a solution on top of Git.




 


----------------------------------------------------------------------------







1. git init

Usage: Initializes a new Git repository.

Command: git init

Description: This command creates a new Git repository. It sets up a .git directory in the project, Git refers the .git folder for Tracking, Logging, Provide Credentials to a Secret Git Repository & To Ensure that Our Developers are Not pushing any Sensitive Information to Git.


git init



-----------------------------------------------------------------


2. git clone

Usage: Clone a repository from a remote source.

Command: git clone <repository-url>

Description: This copies the remote repository (from GitHub, GitLab, etc.) to your local machine.


git clone https://github.com/username/repo.git




-----------------------------------------------------------------


3. git status

Usage: Check the status of files in the working directory.

Command: git status

Description: Shows which files have been modified, staged for commit, or are untracked.


git status




-----------------------------------------------------------------


4. git add

Usage: Add files to the staging area.

Command: git add <file-name>

Description: This command stages changes. Use . to stage all modified files.


git add filename.txt

git add . # Adds all changes




-----------------------------------------------------------------


5. git commit

Usage: Commit changes in the staging area.

Command: git commit -m "Commit message"

Description: Saves the staged changes with a descriptive commit message.


git commit -m "Added new feature"




-----------------------------------------------------------------


6. git push

Usage: Push commits to a remote repository.

Command: git push origin <branch-name>

Description: Sends the committed changes to the remote repository (e.g., GitHub).


git push origin main




-----------------------------------------------------------------


7. git pull

Usage: Fetch and merge changes from the remote repository.

Command: git pull origin <branch-name>

Description: Fetches the latest changes from the remote repository and merges them into the local branch.


git pull origin main




-----------------------------------------------------------------


8. git branch

Usage: Manage branches.

Command: git branch

Description: Lists all branches. Use git branch <branch-name> to create a new branch.


git branch    # Lists branches

git branch new-feature    # Creates a new branch  




-----------------------------------------------------------------


9. git checkout

Usage: Switch between branches or restore files.

Command: git checkout <branch-name>

Description: Switches to another branch. You can also use git checkout -- <file> to discard changes to a file.


git checkout new-feature     [Used to switch from Main branch to new-feature branch]

git checkout -b <new_branch_name>   [To Create a New Branch & It will hv All the Changes which a Main Branch Has Till Today]




-----------------------------------------------------------------


10. git merge

Usage: Merge branches.

Command: git merge <branch-name>

Description: Merges the specified branch into the current branch.


git merge new-feature




Note - Merge and Rebase me ye Fark h k Merge k Commits Top per Show Hoge and Rebase k Liner Way me Show Honge.

-----------------------------------------------------------------


11. git log

Usage: View commit history.

Command: git log

Description: Displays a list of commits along with their authors, dates, and messages.


git log

git log --oneline  [To see the logs in One Single Line]




-----------------------------------------------------------------


12. git remote

Usage: Manage remote repositories.

Command: git remote

Description: Lists or modifies the remote repository connections. git remote add <name> <url> adds a remote.


git remote -v # Lists the Remote Reference which we have added    [git clone kr k jo repo clone kiye wo show krega] 

git remote add origin https://github.com/Amyshk786/AWS  [Agar Humne git clone kr k Repo clone nhi kiye toh ye command se Remote Ref Add kr skte h]




-----------------------------------------------------------------


13. git fetch

Usage: Fetch changes from a remote repository.

Command: git fetch

Description: Downloads objects and refs from another repository without merging them.


git fetch origin




-----------------------------------------------------------------


14. git rebase   [Recommended to be Used over Git Merge]

Usage: Reapply commits on top of another base tip.

Command: git rebase <branch-name>

Description: Moves or combines a sequence of commits to a new base commit.


git rebase main




-----------------------------------------------------------------


15. git reset

Usage: Undo changes in the working directory or staging area.

Command: git reset <file-name>

Description: Removes the specified files from the staging area. With the --hard option, it discards changes.


git reset filename.txt   # Unstages a file

git reset --hard "commit_id"    # Resets to the last commit




-----------------------------------------------------------------


16. git stash

Usage: Temporarily save changes.

Command: git stash

Description: Stashes your changes (saves them temporarily) so you can work on something else without committing.


git stash
git stash pop   # Applies the stashed changes and removes them from the stash




-----------------------------------------------------------------


17. git tag

Usage: Tag a specific commit.

Command: git tag <tag-name>

Description: Assigns a tag to a specific commit, typically used to mark release versions.


git tag v1.0.0




-----------------------------------------------------------------


18. git config

Usage: Configure Git settings.

Command: git config --global <option>

Description: Configures user-specific settings, such as username and email for commits.


git config --global user.name "John Doe"

git config --global user.email "johndoe@example.com"




-----------------------------------------------------------------


19. git diff

Usage: Show changes between commits, branches, or files.

Command: git diff

Description: Shows the changes between the working directory and the staging area or between branches.


git diff   # Changes not yet staged

git diff --staged   # Changes staged for commit




-----------------------------------------------------------------


20. git rm

Usage: Remove files from the working directory and the index.

Command: git rm <file-name>

Description: Deletes a file from the working directory and stages its deletion.


git rm filename.txt












-----------------------------------------------------------------




Git Workflow - 
==============


1. A DEVELOP branch is created from MAIN


2. A RELEASE branch is created from DEVELOP


3. FEATURE branches are created from DEVELOP


4. When a FEATURE is complete it is merged into the DEVELOP branch


5. When the RELEASE branch is done it is merged into DEVELOP and MAIN


6. If an issue in MAIN is detected a HOTFIX branch is created from MAIN


7. Once the HOTFIX is complete it is merged to both DEVELOP and MAIN
