Day-32 | How to Manage Hundreds of Kubernetes clusters ??? | KOPS
===================================================================




If you are being interviewed for Kubernetes or DevOps administrator positions one of your primary responsibilities would be to create infrastructure for your organization and if you are using Kubernetes then expectation from you would be to also manage the life cycle of your Kubernetes clusters now if you are not using a Mini Cube k3s K8s all of these things in your organization then you should know what is the Kubernetes that people are using in their organizations or what are the Kubernetes distributions.  How people manage Kubernetes on their clusters now firstly let's try to understand why are the local Kubernetes clusters because you know they are primarily you know they are not full-blown Kubernetes clusters they have they don't have usually you set up Kubernetes in high availability or all of these things these platforms do not support that and they know they do not ensure any issues that you run into production if you just complain Mini Cube they say that we are not Production Ready Kubernetes set up then we don't solve your problems in production.



So saying all these things let's try to understand how Organizations, DevOps Engineers, Cloud Engineers manage their Kubernetes clusters in production systems so before that you need to understand that what is a Kubernetes distribution and what are the popular Kubernetes distributions because this is where your interview is going to be so people will not ask you questions on Mini Cube people will not ask you questions on k3s whereas people will ask you what Kubernetes distribution have you used in your production and if you have used any Kubernetes distribution did you manage that installation did you manage the upgrades of that specific distribution.



So this is where your interview is going to be now what is a distribution so for any open source platforms like let's take example of Linux so first of all Linux is a open source free software so what people have done is they have developed distributions on top of it for example best example is Amazon Linux. So you must if you are using AWS you must have seen something called as Amazon Linux distribution or you must have seen something called as RedHat distribution, Centos, Ubuntu so what are all of these things they are basically distributions like these people have taken the open source Linux platform and they said that okay let's enhance this creative wrappers on top of it or you know create our own Distribution on it whereas like if you can talk about Amazon Linux or RedHat if you have any issues with your Linux platform let's say your kernel is not working well or any of these things so you can directly talk to red hat or Amazon Linux and they will also on time if you are using Amazon Linux one of the advantage is they will ensure that whenever there is security patches or any of these things they upgrade on time to time basis it's not that open source platforms don't do it but because you are paying for let's say you're using Red Hat subscription because you are paying for Red Hat subscription so they ensure that you are operating system or your kernel is safe from all of the security vulnerabilities right so this is one of the advantages of providing the distributed version similarly even if you take example of in the same lines Kubernetes. So Kubernetes is a open source container orchestration solution platform right it's a open source COE platform Container Orchestration Engine or Container Orchestration Solution.



So what people have done is they have identified that okay so let's build software on top of Kubernetes or List build distributions on top of Kubernetes for example what Amazon has done is they have come up with its own managed Kubernetes service that is EKS or what RedHat has done is they came up with their open you know distribution called OpenShift,  VMware has Tanzu there is something called as Rancher Labs which has created something called as Rancher so all of these are distributions of Kubernetes.



So it's like if you understand the concept if you understand the architecture if you understand how Kubernetes works then you almost know all of these tools because they are not building anything new but they are building only user experience on top of Kubernetes or they are providing a better customer experience what is customer experience let's say you have any issue with EKS so you know that you can raise a support ticket with Amazon and it will get resolved as soon as possible because you are paying for EKS.  Whereas if you create EC2 instances and on top of EC2 instances if you are installing Kubernetes on your own then if you tell Amazon that  I went into some issue on Kubernetes then Amazon will tell you let us know if you ran into some issues on ec2 because that is the software that we are providing you or that is the IAAS tool or compute that we are providing you Kubernetes is something that you have installed by your own if you want support from us on Kubernetes get into our manage Kubernetes service that is EKS.



So there are various distributions of Kubernetes and why the distributions are popular because this distributions provides you support tomorrow if you land into some issue with Kubernetes the open source platform they will definitely help you but they have their own timelines right so they cannot say that customer XYZ is uh running into some issues on Kubernetes so let me fix the issue they will have their own priority whereas if you talk about uh the licensed ones because you are paying them money so they'll give you instant support.  But what is the order of this distributions like which distribution is very popular and which distributions are widely used this is very important again is because if you are giving an interview you cannot say that you are using my mini Cube on your production system then your interviewer will immediately reject you so you should tell them that I am using one of these systems and what are these one of the systems firstly kubernetes itself.




So Kubernetes is the Top-Most one that is used in Production after that people use OpenShift and after that so I have done some research on these things we read some articles and this is the order so after that people use Rancher then there is something called as VMware Tanzu then comes your EKS AKS GKE Docker Kubernetes Engine so all of these things Falls after that no I'm not comparing Docker Swarm with this because they are all Kubernetes distributions Docker Swarm is a different container orchestration engine itself okay but these things are Kubernetes distributions there is a difference between both of these things. So now as it DevOps engineer you should always project yourself to an interviewer that you are not using mini Cube or micro k8s or kind of these things on your production system but you are using one of these things on your production system so what is the difference between installing Kubernetes directly versus installing mini Cube.



So if you are using or installing Kubernetes that means to say that you are installing Kubernetes with all the capabilities for a Enterprise for example just give an example Mini Cube can run on a single node architecture with just like you know two CPUs and four GB Ram whereas if you are actually dealing with your kubernetes cluster introduction you will need lot of capabilities like your etcd itself will take a lot of you know storage and memory and then you have your EBS volumes if you are installing on AWS of course or else if you have your storage related things and you have all of your components uh that are you know in full blown capacity so that is the difference between mini Cube and Kubernetes is and one more question before I show you the demo in life because I know you are all very excited about the demo I'm going to show you how we are going to install not like mini Cube or something but we will use a tool called KOPS Kubernetes Operations.




And I'll show you how in real a cloud engineer or DevOps engineer installs and manages their hundreds of Kubernetes clusters but one more question is what is the difference between Kubernetes and EKS so the difference between Kubernetes and EKS is if you are installing a couple of ec2 instances and if you install Kubernetes on top of it and make a cluster that means to say that you are managing this Kubernetes cluster and Amazon will not provide you any support on issues with the Kubernetes whether it can be misconfiguration or whether it can be any kind of issue on Kubernetes whereas if you are using EKS then you get support from Amazon that's the only difference rest of the things on EKS is there because this is a managed and supported Solution by Amazon they just have some wrappers they have some additional scripts they have something called as EK CTL so you can consider this as again like a distribution of Kubernetes that is provided by Amazon which has some additional wrappers which has some additional plugins and command line options but end of the day the solution is the same.  Now let's move on to the topic for today that is how DevOps engineer manage their hundreds of clusters on production so one of the primary tool or one of the most widely used tools is KOPS that doesn't means that there are no other tools so you have tools like Kube ADM you have Kube Squash there are multiple tools but KOPS is the one that is most widely used so let's talk about KOPS so initially if you talk about four years five years back or six years back Kube ADM was the one that was most widely used and even I started learning kubernetes or creating the Clusters using Kube ADM.



The only difference is with Kube ADM you have to do a lot of manual activities and you know whenever you are talking about the upgrades or you know configuring or modifying your kubernetes clusters Kube ADM does not have that smooth uh way of handling things whereas Kops is basically kubernetes operations so that's why it's called Kops kubernetes operations.  So what Kops brings you is for a devops engineer one of the most important thing is not just the installation but you have to deal with upgrades then you have to deal with modifications you have to deal with Deletion of Clusters so all of these things which is called as a Life-Cycle of Kubernetes. 



So you have a life cycle of kubernetes that is managed by Kops so that is why Kops is one of the most widely used tools for installing kubernetes whereas if we go for the other options let's say if you go back to the previous slides so you have openshift you have Rancher you have tanzo so all of these things have their own set of installations and like say let's say you have to install openshift so what you will do is let's say you want to project yourself as a devops engineer who knows openshift and who works on openshift so what you can do is you can go to the openshift docs and you will see that openshift provides you a lot of Ansible playbooks using this ansible playbooks you can install openshift platform.



But saying that you need to have RedHat subscription  you cannot you know directly use Centos machines and install openshift on top of it but you have to create a red hat virtual machines on your Amazon Linux and on top of that you can download the ansible playbooks that are present on the openshift documentation and you can install ansible on top of these things but be careful all of these things whenever you are purchasing the red hat subscription or whenever you are going for the installation of EKS, AKS or GKE so that will incur some money.




------------------------------------------------------------


# Kubernetes Installation Using Kops
=======================================



GitHub Repo Used 
Link - https://github.com/iam-veeramalla/Kubernetes-Zero-to-Hero.git



# Kubernetes-Zero-to-Hero
Creating this repo with an intent to make Kubernetes easy for begineers. This is a work-in-progress repo.


## Kubernetes Installation Using KOPS on EC2


### Create an EC2 instance or use your personal laptop.

Dependencies required

1. Python3
2. AWS CLI
3. kubectl




###  Install dependencies

```
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
```

```
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
```

```
sudo apt-get update
sudo apt-get install -y python3-pip apt-transport-https kubectl
```

```
pip3 install awscli --upgrade
```

```
export PATH="$PATH:/home/ubuntu/.local/bin/"
```





### Install KOPS (Our Hero for Today)

```
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64

chmod +x kops-linux-amd64

sudo mv kops-linux-amd64 /usr/local/bin/kops
```





### Provide the below permissions to your IAM user. If you are using the admin user, the below permissions are available by default

1. AmazonEC2FullAccess
2. AmazonS3FullAccess
3. IAMFullAccess
4. AmazonVPCFullAccess





### Set up AWS CLI configuration on your EC2 Instance or Laptop.

Run `aws configure`




## Kubernetes Cluster Installation

Please follow the steps carefully and read each command before executing.




### Create S3 bucket for storing the KOPS objects.

```
aws s3api create-bucket --bucket kops-abhi-storage --region us-east-1
```




### Create the cluster

```
kops create cluster --name=demok8scluster.k8s.local --state=s3://kops-abhi-storage --zones=us-east-1a --node-count=1 --node-size=t2.micro --master-size=t2.micro  --master-volume-size=8 --node-volume-size=8
```




### Important: Edit the configuration as there are multiple resources created which won't fall into the free tier.

```
kops edit cluster myfirstcluster.k8s.local
```

Step 12: Build the cluster

```
kops update cluster demok8scluster.k8s.local --yes --state=s3://kops-abhi-storage
```

This will take a few minutes to create............

After a few mins, run the below command to verify the cluster installation.

```
kops validate cluster demok8scluster.k8s.local
```


