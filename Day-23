Day-23 | Introduction to Containers | Learn about Containers in Easy Way
==========================================================================


# Virtual Machines are Advancement to Physical Servers 


# Containers are Advancement to Virtual Machines



Virtualization - For Example we have Bought a Physical Server with 100 GB RAM & 100 CPUs and We Have Installed a Xen Hypervisor on it and we have Created 4 Virtual Machines with 25 GB RAM and 25 CPUs. 




Problem Statement - As we have Created 4 VMs and we Realised that some of the VMs are Only Using 15 GB RAM and 10 CPUs on their Full Capacity  & the Remaining 10 GB RAM and 15 CPUs are Getting Under Utilised and Are Not In Use so this is Wastage of Resources. So to Solve this Problem The Concept of Container came into Picture.




Containers - Containers Can be Created in 2 Ways   [1st On Top of Virtual Machines]   [2nd You can Create Containers On Top of Physical Servers as well]


- Most of the Orgainsations these Days Uses the VM Approach as they do not have to Bear the Maintenance Overhead whenever their is a New Update the Cloud Provider can do that.


- Whereas If the Orgainsations Deploy Containers on their Physical Servers they will have to Bear a Lot of Maintenance Overhead and Maintain their Own Datacenters.




---------------------------------------------------


# Virtual machine has a complete operating system and they have a complete isolation and security. If we take a Backup of Our Virtual Machine we Create a Snapshot and If it is a Simple VM with Minimal Configuration so the Size of the Snapshot will be 1GB or 2GB or 5GB.





# Containers are Very Light-Weight in Nature, The docker containers do not have a complete operating system if this is C1 C2 C3 C4 C5 so the docker containers Use the Resources from their Base Operating System, Or they Use the Resources from the Virtual Machines or physical server that they are running on. For example if the virtual machine is using a Linux platform and your Container requires any dependencies or if they require any shared libraries or any of the things from the host operating system or the host virtual machine they will share the resources so all of them will try to use from the host operating system so this is one of the major thing. 


They will have a minimal operating system or they will have a base image. So a container is nothing but a  package or it's a bundle which is a combination of your application + your application libraries that means your application dependencies + system dependencies. As Compared to the VMs the Backup of the Containers are in MBs if it is a Simple Container with Minimal Configuration. Because the size of the image or the containers are lightweight in nature they are even easy to ship what do I mean by ship to move from one place to another let's say you want to deploy this Docker container onto a ontainer platform or you want to deploy this Docker image onto kubernetes or anything they are very easy to ship and they're very easy to transfer.



So this is one more Advantage and the Docker Container will have a Base Image and the Base Image will Contain [System Dependencies  +  Application Dependencies  + Application Libraries] Will form your Docker Container or Docker Image  







---------------------------------------------------


# How Docker Works
====================

So we have to Write a Docker File and we have to Submit this to Docker Platform Or We Can Submit this to Docker Engine using some Docker Commands, This Docker engine will convert his Docker file into an image this is a Docker image or a container image now again using some Docker commands you can convert this image into container.   So if somebody is asking you what is the life cycle of Docker or what is the life cycle of containers what you will say is the first stage would be to Write a Docker file and to Execute this Docker file  Create a Image and Again Execute this Image  Create a Container.



# Docker Life-Cycle

Dockerfile  ->  Docker Image  ->  Docker Container  -> 



Docker is very much dependent on Docker Engine and this Docker Engine is basically a Single Point Of Failure (SPOF).   Let's say if a Docker Engine is down for some reason that means to say that all your Docker containers will stop working this is a terrible way right so off late the organizations are off late the 
Docker Community is working on this one and the major drawback is that till now there is no I mean till now you cannot work around with this issue that if your Docker engine is going down then all of your containers will not be responding and your customers like let's say you are using Docker and you are a Test Team or your Customers is looking away but your containers are not working or not responding because your Docker engine is down. 





---------------------------------------------------


# Concept of Buildah
====================== 


So to avoid this single point of failure and to solve various challenges like what happens is whenever a Docker image is being built from Docker file it creates a lot of layers  it creates a lot of layers and each of this layer again takes a lot of space or a lot of storage on your disk so to solve again this problem instead of creating a lot of layers you can and to solve the problem of Single Point of Failure  and other challenges Buildah said that let me create a tool and this tool will help you to solve this problem so Buildah will aim to solve the layers problem spof problem Simplicity it works very well with Scorpio and Podman so that's why you should also learn Buildah so it doesn't take a lot of time Buildah basically works a lot on commands so you don't have to write something like Docker files.



So in Buildah you can basically write a shell script and in the shell script you can put all of the Buildah commands and it would create a image for you and this image can be a Docker image or any other Open Container Initiative (OCI) Compliant image so Buildah also supports Docker images you can also create a Docker images using Buildah.


