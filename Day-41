DAY-41 | KUBERNETES LIVE PROJECT | CONFIGMAPS & SECRETS | HOW TO USE CONFIGMAPS & SECRETS INSIDE POD
=====================================================================================================


ðŸ”¹ ConfigMap

- Purpose: Store non-confidential configuration data in key-value pairs.

- Use case: Application settings, environment variables, file paths, external service URLs, etc.

- Storage: Data is stored in plain text inside etcd.

- Encoding: Values are stored as plain strings (no encoding/encryption).

- Size limit: 1 MB.


Example:
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_MODE: "production"
  APP_PORT: "8080"







ðŸ”¹ Secret

- Purpose: Store sensitive/confidential information like passwords, tokens, and SSH keys.

- Use case: Database passwords, API keys, TLS certificates.

- Storage: Also stored in etcd, but usually Base64-encoded (not encrypted by default).

- Encoding: Values must be Base64-encoded when defined in YAML.

- Supports encryption at rest (when enabled in Kubernetes cluster).


Example:
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  DB_USER: YWRtaW4=        # "admin"
  DB_PASSWORD: cGFzc3dvcmQ= # "password"








ðŸ”‘ Key Differences

| Feature             | ConfigMap                        | Secret                                 |
| ------------------- | -------------------------------- | -------------------------------------- |
| **Purpose**         | Non-sensitive configuration data | Sensitive data (passwords, tokens)     |
| **Data type**       | Plain text                       | Base64-encoded (optionally encrypted)  |
| **Security**        | No security                      | Designed for confidentiality           |
| **Use case**        | App settings, configs            | Credentials, API keys, certificates    |
| **Default storage** | Plain text in etcd               | Base64 in etcd (can enable encryption) |






------------------------------------------------------------------------------------------------------------







# Practical of ConfigMap and Secrets
------------------------------------


Create a EC2 Instance and Install [Docker, KIND & Kubectl]


Use below shell script in kubestarter


Create a Kind Cluster

- vim config.yml 

# three node (two workers) cluster config
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker



- kind create cluster --name my-kind-cluster --config=config.yml


git clone https://github.com/iam-veeramalla/Docker-Zero-to-Hero.git


- cd /Docker-Zero-to-Hero/examples/python-web-app


Create a ConfigMap

- vim cm.yml 

apiVersion: v1 
kind: ConfigMap
metadata:
  name: test-cm
data:
  db-port: "3306"


 


- kubectl apply -f cm.yml

- kubectl get cm

- kubectl describe cm test-cm



- vim deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: abhishekf5/python-sample-app-demo:v1
        ports:
        - containerPort: 8000



- kubectl apply -f deployment.yml

deployment.apps/sample-python-app created



- kubectl get pods -w [-w is for Watching the Pods]

NAME                                READY   STATUS              RESTARTS   AGE
sample-python-app-b655bc754-fzvsb   0/1     ContainerCreating   0          14s
sample-python-app-b655bc754-nkfv8   0/1     ContainerCreating   0          14s
sample-python-app-b655bc754-nkfv8   1/1     Running             0          16s
sample-python-app-b655bc754-fzvsb   1/1     Running             0          17s






- To LogIn Into the Pod

# kubectl exec -it sample-python-app-b655bc754-fzvsb -- /bin/bash



- Now if we run the below Command there is no Environment Variable for DB

# env | grep DB-PORT




- Now we will Modify Our Deployment.yml file and add the Environment Variable for DB-PORT

- vim deployment.yml 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: abhishekf5/python-sample-app-demo:v1
        env:
          - name: DB-PORT
            valueFrom:
              configMapKeyRef:
                name: test-cm
                key: db-port
        ports:
        - containerPort: 8000







- kubectl apply -f deployment.yml

deployment.apps/sample-python-app created






- kubectl get pods -w

NAME                                 READY   STATUS    RESTARTS   AGE
sample-python-app-67fdbc6478-2ggp2   1/1     Running   0          9s
sample-python-app-67fdbc6478-nsv99   1/1     Running   0          11s





# We Have Logged Into the Pod
- kubectl exec -it sample-python-app-67fdbc6478-2ggp2 -- /bin/bash



# Now we can see the Environment Variable is showing
- root@sample-python-app-67fdbc6478-2ggp2:/app# env | grep DB-PORT
DB-PORT=3306








------------------------------------------------------------------------------------------------------------


# Abhi Humne Info Environment Variable me Dale But Hum Real-Time me Volume Mounts Use Karege


- vim deployment.yml 


apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-python-app
  labels:
    app: sample-python-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-python-app
  template:
    metadata:
      labels:
        app: sample-python-app
    spec:
      containers:
      - name: python-app
        image: abhishekf5/python-sample-app-demo:v1
        volumeMounts:
          - name: db-connection
            mountPath: /opt  
        ports:
        - containerPort: 8000
      volumes:
        - name: db-connection
          configMap:
            name: test-cm




Note - Humne Volume Create Kiye with the name "db-connection" and Humne Usko bole k Data ConfigMap se Read Kr Jiska Name "test-cm" Hai and Humne usko "/opt" Directory me Mount Kiye. [Ab Jab Phi Hum "cm.yml" Me Changes Krege and Usko Apply kerne toh After few Minutes Humara "DB-PORT" Me wo changes Reflect Karega]

